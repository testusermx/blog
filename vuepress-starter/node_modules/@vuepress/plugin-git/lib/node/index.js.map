{"version":3,"file":"index.js","sources":["../../src/node/utils/checkGitRepo.ts","../../src/node/utils/digestSHA256.ts","../../src/node/utils/getCommits.ts","../../src/node/utils/getContributorInfo.ts","../../src/node/utils/getUserNameWithNoreplyEmail.ts","../../src/node/utils/inferGitProvider.ts","../../src/node/resolveChangelog.ts","../../src/node/resolveContributors.ts","../../src/node/gitPlugin.ts"],"sourcesContent":["import { execaCommandSync } from 'execa'\n\n/**\n * Check if the git repo is valid\n */\nexport const checkGitRepo = (cwd: string): boolean => {\n  try {\n    execaCommandSync('git status', { cwd })\n    return true\n  } catch {\n    return false\n  }\n}\n","import { createHash } from 'node:crypto'\n\nconst hash = createHash('sha256')\n\nexport const digestSHA256 = (message: string): string => {\n  hash.update(message)\n\n  return hash.digest('hex')\n}\n","import { execa } from 'execa'\nimport type { GitContributor, MergedRawCommit, RawCommit } from '../typings.js'\n\nconst FORMAT = '%H|%an|%ae|%ad|%s|%d|%b'\nconst SPLIT_CHAR = '[GIT_LOG_COMMIT_END]'\nconst RE_SPLIT = /\\[GIT_LOG_COMMIT_END\\]$/\n\nconst RE_CO_AUTHOR = /^ *Co-authored-by: ?([^<]*)<([^>]*)> */gim\n\nconst getCoAuthors = (\n  body: string,\n): Pick<GitContributor, 'email' | 'name'>[] => {\n  if (!body) return []\n\n  return [...body.matchAll(RE_CO_AUTHOR)]\n    .map(([, name, email]) => ({\n      name: name.trim(),\n      email: email.trim(),\n    }))\n    .filter(Boolean)\n}\n\n/**\n * Get raw commits\n *\n * ${commit_hash} ${author_name} ${author_email} ${author_date} ${subject} ${ref} ${body}\n *\n * @see {@link https://git-scm.com/docs/pretty-formats | documentation} for details.\n */\nexport const getRawCommits = async (\n  filepath: string,\n  cwd: string,\n): Promise<RawCommit[]> => {\n  try {\n    const { stdout } = await execa(\n      'git',\n      [\n        'log',\n        '--max-count=-1',\n        `--format=${FORMAT}${SPLIT_CHAR}`,\n        '--date=unix',\n        '--follow',\n        '--',\n        filepath,\n      ],\n      { cwd },\n    )\n\n    return stdout\n      .replace(RE_SPLIT, '')\n      .split(`${SPLIT_CHAR}\\n`)\n      .filter(Boolean)\n      .map((rawString) => {\n        const [hash, author, email, date, message, refs, body] = rawString\n          .split('|')\n          .map((v) => v.trim())\n        return {\n          filepath,\n          hash,\n          date: Number.parseInt(date, 10) * 1000,\n          message,\n          body,\n          refs,\n          author,\n          email,\n          coAuthors: getCoAuthors(body),\n        }\n      })\n  } catch {\n    return []\n  }\n}\n\nexport const mergeRawCommits = (commits: RawCommit[]): MergedRawCommit[] => {\n  const commitMap = new Map<string, MergedRawCommit>()\n\n  commits.forEach(({ filepath, ...commit }) => {\n    const _commit = commitMap.get(commit.hash)\n    if (_commit) _commit.filepaths.push(filepath)\n    else commitMap.set(commit.hash, { filepaths: [filepath], ...commit })\n  })\n\n  const result = Array.from(commitMap.values())\n  return result\n}\n\nexport const getCommits = async (\n  filepaths: string[],\n  cwd: string,\n): Promise<MergedRawCommit[]> => {\n  const rawCommits = await Promise.all(\n    filepaths.map((filepath) => getRawCommits(filepath, cwd)),\n  )\n\n  return mergeRawCommits(rawCommits.flat()).sort((a, b) =>\n    b.date - a.date > 0 ? 1 : -1,\n  )\n}\n","import type { ContributorInfo } from '../options.js'\n\nconst toArray = <T = unknown>(value?: T | T[]): T[] =>\n  Array.isArray(value) ? value : value ? [value] : []\n\nexport const getContributorInfo = (\n  contributorName: string,\n  infos: ContributorInfo[] = [],\n): ContributorInfo | null =>\n  infos.find(\n    ({ username, alias }) =>\n      username === contributorName || toArray(alias).includes(contributorName),\n  ) ?? null\n","export const getUserNameWithNoreplyEmail = (email: string): string | null =>\n  email.endsWith('@users.noreply.github.com')\n    ? email.replace('@users.noreply.github.com', '').split('+')[1]\n    : null\n","import { execaCommandSync } from 'execa'\nimport type { KnownGitProvider } from '../typings.js'\n\nexport const getRemoteUrl = (cwd: string): string => {\n  try {\n    const { stdout } = execaCommandSync('git remote get-url origin', { cwd })\n    return stdout\n  } catch {\n    try {\n      const { stdout } = execaCommandSync('git remote', { cwd })\n      const remote = stdout.split('\\n')[0]?.trim()\n      if (remote) {\n        const { stdout: remoteUrl } = execaCommandSync(\n          `git remote get-url ${remote}`,\n          {\n            cwd,\n          },\n        )\n        return remoteUrl\n      }\n      return ''\n    } catch {\n      return ''\n    }\n  }\n}\n\nexport const inferGitProvider = (cwd: string): KnownGitProvider | null => {\n  const remoteUrl = getRemoteUrl(cwd)\n\n  if (remoteUrl.includes('github.com')) {\n    return 'github'\n  }\n\n  if (remoteUrl.includes('gitlab.com')) {\n    return 'gitlab'\n  }\n\n  if (remoteUrl.includes('gitee.com')) {\n    return 'gitee'\n  }\n\n  if (remoteUrl.includes('bitbucket.org')) {\n    return 'bitbucket'\n  }\n\n  return null\n}\n","import type { App } from 'vuepress'\nimport type { ChangelogOptions, ContributorInfo } from './options.js'\nimport type {\n  GitChangelog,\n  KnownGitProvider,\n  MergedRawCommit,\n} from './typings.js'\nimport {\n  getContributorInfo,\n  getUserNameWithNoreplyEmail,\n} from './utils/index.js'\n\ninterface Pattern {\n  issue?: string\n  tag?: string\n  commit?: string\n}\n\nconst RE_ISSUE = /#(\\d+)/g\nconst RE_CLEAN_REFS = /[()]/g\n\nconst patterns: Record<KnownGitProvider, Pattern> = {\n  github: {\n    issue: ':repo/issues/:issue',\n    tag: ':repo/releases/tag/:tag',\n    commit: ':repo/commit/:hash',\n  },\n  gitlab: {\n    issue: ':repo/-/issues/:issue',\n    tag: ':repo/-/releases/:tag',\n    commit: ':repo/-/commit/:hash',\n  },\n  gitee: {\n    issue: ':repo/issues/:issue',\n    tag: ':repo/releases/tag/:tag',\n    commit: ':repo/commit/:hash',\n  },\n  bitbucket: {\n    issue: ':repo/issues/:issue',\n    tag: ':repo/src/:hash',\n    commit: ':repo/commits/:hash',\n  },\n}\n\nconst getPattern = (\n  { commitUrlPattern, issueUrlPattern, tagUrlPattern }: ChangelogOptions,\n  provider: KnownGitProvider | null,\n): Pattern => {\n  const fallback = provider ? patterns[provider] : {}\n\n  return {\n    commit: commitUrlPattern ?? fallback.commit,\n    issue: issueUrlPattern ?? fallback.issue,\n    tag: tagUrlPattern ?? fallback.tag,\n  }\n}\n\nconst parseTagName = (refs: string): string | undefined => {\n  if (!refs) return\n\n  const tags = refs\n    .replace(RE_CLEAN_REFS, '')\n    .split(',')\n    .map((tag) => tag.trim())\n\n  return tags[0]?.replace('tag:', '').trim()\n}\n\nexport const resolveChangelog = (\n  app: App,\n  commits: MergedRawCommit[],\n  options: ChangelogOptions,\n  gitProvider: KnownGitProvider | null,\n  contributors: ContributorInfo[],\n): GitChangelog[] => {\n  const pattern = getPattern(options, gitProvider)\n  const repo = options.repoUrl\n  const result: GitChangelog[] = []\n\n  const sliceCommits = options.maxCount\n    ? commits.slice(0, options.maxCount)\n    : commits\n\n  for (const commit of sliceCommits) {\n    const { hash, message, date, author, email, refs, coAuthors } = commit\n    const tag = parseTagName(refs)\n    const contributor = getContributorInfo(\n      getUserNameWithNoreplyEmail(email) ?? author,\n      contributors,\n    )\n    const resolved: GitChangelog = {\n      hash,\n      date,\n      email,\n      author: contributor?.name ?? contributor?.username ?? author,\n      message: app.markdown.renderInline(message),\n    }\n\n    if (coAuthors.length) resolved.coAuthors = coAuthors\n\n    if (pattern.issue && repo) {\n      resolved.message = resolved.message.replace(\n        RE_ISSUE,\n        (matched, issue: string) => {\n          const url = pattern\n            .issue!.replace(':issue', issue)\n            .replace(':repo', repo)\n          return `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${matched}</a>`\n        },\n      )\n    }\n\n    if (pattern.commit && repo)\n      resolved.commitUrl = pattern.commit\n        .replace(':hash', hash)\n        .replace(':repo', repo)\n\n    if (tag) resolved.tag = tag\n\n    if (pattern.tag && repo && tag)\n      resolved.tagUrl = pattern.tag.replace(':tag', tag).replace(':repo', repo)\n\n    result.push(resolved)\n  }\n\n  return result\n}\n","import type { ContributorsOptions } from './options.js'\nimport type {\n  GitContributor,\n  KnownGitProvider,\n  MergedRawCommit,\n} from './typings.js'\nimport {\n  digestSHA256,\n  getContributorInfo,\n  getUserNameWithNoreplyEmail,\n} from './utils/index.js'\n\nexport const getRawContributors = (\n  commits: MergedRawCommit[],\n  options: ContributorsOptions,\n  gitProvider: KnownGitProvider | null,\n): GitContributor[] => {\n  const contributors = new Map<string, GitContributor>()\n\n  for (const commit of commits) {\n    const authors = [\n      { name: commit.author, email: commit.email },\n      ...commit.coAuthors,\n    ]\n\n    for (const { name: author, email } of authors) {\n      const config = getContributorInfo(\n        getUserNameWithNoreplyEmail(email) ?? author,\n        options.info,\n      )\n      const username = config?.username ?? author\n      const name = config?.name ?? username\n\n      const contributor = contributors.get(name + email)\n\n      if (contributor) {\n        contributor.commits++\n      } else {\n        const item: GitContributor = {\n          name,\n          email,\n          commits: 1,\n        }\n\n        if (options.avatar)\n          item.avatar =\n            config?.avatar ??\n            (gitProvider === 'github'\n              ? `https://avatars.githubusercontent.com/${username}?v=4`\n              : `https://gravatar.com/avatar/${digestSHA256(email || username)}?d=retro`)\n\n        const url =\n          (config?.url ?? gitProvider === 'github')\n            ? `https://github.com/${username}`\n            : undefined\n        if (url) item.url = url\n\n        contributors.set(name + email, item)\n      }\n    }\n  }\n\n  return Array.from(contributors.values()).filter((item, index, self) => {\n    // If one of the contributors is a \"noreply\" email address, and there's\n    // already a contributor with the same name, it is very likely a duplicate,\n    // so it can be removed.\n    if (item.email.split('@')[1]?.match(/no-?reply/)) {\n      const realIndex = self.findIndex((t) => t.name === item.name)\n      if (realIndex !== index) {\n        // Update the \"real\" contributor to also include the noreply's commits\n        self[realIndex].commits += item.commits\n        return false\n      }\n      return true\n    }\n    return true\n  })\n}\n\nexport const resolveContributors = (\n  commits: MergedRawCommit[],\n  gitProvider: KnownGitProvider | null,\n  options: ContributorsOptions,\n  extraContributors: string[] = [],\n): GitContributor[] => {\n  const contributors = getRawContributors(commits, options, gitProvider)\n\n  if (options.info?.length && extraContributors.length) {\n    for (const extraContributor of extraContributors) {\n      if (contributors.every((item) => item.name !== extraContributor)) {\n        const contributorInfo = getContributorInfo(\n          extraContributor,\n          options.info,\n        )\n\n        if (!contributorInfo) continue\n\n        const result: GitContributor = {\n          name: contributorInfo.name ?? extraContributor,\n          email: '',\n          commits: 0,\n        }\n\n        const url =\n          contributorInfo.url ??\n          (gitProvider === 'github'\n            ? `https://github.com/${contributorInfo.username}`\n            : null)\n\n        if (options.avatar)\n          result.avatar =\n            contributorInfo.avatar ??\n            (gitProvider === 'github'\n              ? `https://avatars.githubusercontent.com/${contributorInfo.username}?v=4`\n              : `https://gravatar.com/avatar/${digestSHA256(contributorInfo.username)}?d=retro`)\n\n        if (url) result.url = url\n\n        contributors.push(result)\n      }\n    }\n  }\n\n  return options.transform?.(contributors) ?? contributors\n}\n","import type { Page, Plugin } from 'vuepress/core'\nimport { isPlainObject } from 'vuepress/shared'\nimport { path } from 'vuepress/utils'\nimport type {\n  GitPluginFrontmatter,\n  GitPluginOptions,\n  GitPluginPageData,\n} from './options.js'\nimport { resolveChangelog } from './resolveChangelog.js'\nimport { resolveContributors } from './resolveContributors.js'\nimport { checkGitRepo, getCommits, inferGitProvider } from './utils/index.js'\n\nexport const gitPlugin =\n  ({\n    createdTime,\n    updatedTime,\n    contributors,\n    changelog = false,\n    filter,\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    transformContributors,\n  }: GitPluginOptions = {}): Plugin =>\n  (app) => {\n    const cwd = app.dir.source()\n    const isGitRepoValid = checkGitRepo(cwd)\n    const gitProvider = isGitRepoValid ? inferGitProvider(cwd) : null\n\n    return {\n      name: '@vuepress/plugin-git',\n\n      extendsPage: async (\n        page: Page<GitPluginPageData, GitPluginFrontmatter>,\n      ) => {\n        page.data.git = {}\n\n        if (!isGitRepoValid || page.filePathRelative === null) {\n          return\n        }\n\n        if (filter && !filter(page)) return\n\n        const { frontmatter } = page\n\n        // skip if all features are disabled\n        if (\n          !(frontmatter.contributors ?? contributors ?? true) &&\n          !(frontmatter.changelog ?? changelog) &&\n          createdTime === false &&\n          updatedTime === false\n        ) {\n          return\n        }\n\n        const filePaths = [\n          page.filePathRelative,\n          ...(page.frontmatter.gitInclude ?? []).map((item) =>\n            path.join(page.filePathRelative, '..', item),\n          ),\n        ]\n\n        const commits = await getCommits(filePaths, cwd)\n\n        if (commits.length === 0) return\n\n        if (createdTime !== false) {\n          page.data.git.createdTime = commits[commits.length - 1].date\n        }\n\n        if (updatedTime !== false) {\n          page.data.git.updatedTime = commits[0].date\n        }\n\n        const contributorsOptions = isPlainObject(contributors)\n          ? contributors\n          : {}\n\n        if ((frontmatter.contributors ?? contributors) !== false) {\n          contributorsOptions.transform ??= transformContributors\n          page.data.git.contributors = resolveContributors(\n            commits,\n            gitProvider,\n            contributorsOptions,\n            Array.isArray(frontmatter.contributors)\n              ? frontmatter.contributors\n              : [],\n          )\n        }\n\n        if (frontmatter.changelog ?? changelog) {\n          const changelogOptions = isPlainObject(changelog) ? changelog : {}\n\n          page.data.git.changelog = resolveChangelog(\n            app,\n            commits,\n            changelogOptions,\n            gitProvider,\n            contributorsOptions.info ?? [],\n          )\n        }\n      },\n\n      // remove `gitInclude` from frontmatter\n      onInitialized: () => {\n        app.pages.forEach((page) => {\n          delete page.frontmatter.gitInclude\n        })\n      },\n    }\n  }\n"],"names":["checkGitRepo","cwd","execaCommandSync","hash","createHash","digestSHA256","message","FORMAT","SPLIT_CHAR","RE_SPLIT","RE_CO_AUTHOR","getCoAuthors","body","name","email","getRawCommits","filepath","stdout","execa","rawString","author","date","refs","v","mergeRawCommits","commits","commitMap","commit","_commit","getCommits","filepaths","rawCommits","a","b","toArray","value","getContributorInfo","contributorName","infos","username","alias","getUserNameWithNoreplyEmail","getRemoteUrl","remote","remoteUrl","inferGitProvider","RE_ISSUE","RE_CLEAN_REFS","patterns","getPattern","commitUrlPattern","issueUrlPattern","tagUrlPattern","provider","fallback","parseTagName","tag","resolveChangelog","app","options","gitProvider","contributors","pattern","repo","result","sliceCommits","coAuthors","contributor","resolved","matched","issue","getRawContributors","authors","config","item","url","index","self","realIndex","t","resolveContributors","extraContributors","extraContributor","contributorInfo","gitPlugin","createdTime","updatedTime","changelog","filter","transformContributors","isGitRepoValid","page","frontmatter","filePaths","path","contributorsOptions","isPlainObject","changelogOptions"],"mappings":"mLAKO,MAAMA,EAAgBC,GAAyB,CACpD,GAAI,CACF,OAAAC,EAAiB,aAAc,CAAE,IAAAD,CAAI,CAAC,EAC/B,EACT,MAAQ,CACN,MAAO,EACT,CACF,ECVME,EAAOC,EAAW,QAAQ,EAEnBC,EAAgBC,IAC3BH,EAAK,OAAOG,CAAO,EAEZH,EAAK,OAAO,KAAK,GCJpBI,EAAS,0BACTC,EAAa,uBACbC,EAAW,0BAEXC,EAAe,4CAEfC,EACJC,GAEKA,EAEE,CAAC,GAAGA,EAAK,SAASF,CAAY,CAAC,EACnC,IAAI,CAAC,CAAA,CAAGG,EAAMC,CAAK,KAAO,CACzB,KAAMD,EAAK,KAAK,EAChB,MAAOC,EAAM,KAAA,CACf,EAAE,EACD,OAAO,OAAO,EAPC,GAiBPC,EAAgB,MAC3BC,EACAf,IACyB,CACzB,GAAI,CACF,KAAM,CAAE,OAAAgB,CAAO,EAAI,MAAMC,EACvB,MACA,CACE,MACA,iBACA,YAAYX,CAAM,GAAGC,CAAU,GAC/B,cACA,WACA,KACAQ,CACF,EACA,CAAE,IAAAf,CAAI,CACR,EAEA,OAAOgB,EACJ,QAAQR,EAAU,EAAE,EACpB,MAAM,GAAGD,CAAU;AAAA,CAAI,EACvB,OAAO,OAAO,EACd,IAAKW,GAAc,CAClB,KAAM,CAAChB,EAAMiB,EAAQN,EAAOO,EAAMf,EAASgB,EAAMV,CAAI,EAAIO,EACtD,MAAM,GAAG,EACT,IAAKI,GAAMA,EAAE,KAAM,CAAA,EACtB,MAAO,CACL,SAAAP,EACA,KAAAb,EACA,KAAM,OAAO,SAASkB,EAAM,EAAE,EAAI,IAClC,QAAAf,EACA,KAAAM,EACA,KAAAU,EACA,OAAAF,EACA,MAAAN,EACA,UAAWH,EAAaC,CAAI,CAC9B,CACF,CAAC,CACL,MAAQ,CACN,MAAO,CAAA,CACT,CACF,EAEaY,EAAmBC,GAA4C,CAC1E,MAAMC,EAAY,IAAI,IAEtB,OAAAD,EAAQ,QAAQ,CAAC,CAAE,SAAAT,EAAU,GAAGW,CAAO,IAAM,CAC3C,MAAMC,EAAUF,EAAU,IAAIC,EAAO,IAAI,EACrCC,EAASA,EAAQ,UAAU,KAAKZ,CAAQ,EACvCU,EAAU,IAAIC,EAAO,KAAM,CAAE,UAAW,CAACX,CAAQ,EAAG,GAAGW,CAAO,CAAC,CACtE,CAAC,EAEc,MAAM,KAAKD,EAAU,OAAO,CAAC,CAE9C,EAEaG,EAAa,MACxBC,EACA7B,IAC+B,CAC/B,MAAM8B,EAAa,MAAM,QAAQ,IAC/BD,EAAU,IAAKd,GAAaD,EAAcC,EAAUf,CAAG,CAAC,CAC1D,EAEA,OAAOuB,EAAgBO,EAAW,KAAM,CAAA,EAAE,KAAK,CAACC,EAAGC,IACjDA,EAAE,KAAOD,EAAE,KAAO,EAAI,EAAI,EAC5B,CACF,EC/FME,EAAwBC,GAC5B,MAAM,QAAQA,CAAK,EAAIA,EAAQA,EAAQ,CAACA,CAAK,EAAI,CAAA,EAEtCC,EAAqB,CAChCC,EACAC,EAA2B,CAAA,IAE3BA,EAAM,KACJ,CAAC,CAAE,SAAAC,EAAU,MAAAC,CAAM,IACjBD,IAAaF,GAAmBH,EAAQM,CAAK,EAAE,SAASH,CAAe,CAC3E,GAAK,KCZMI,EAA+B3B,GAC1CA,EAAM,SAAS,2BAA2B,EACtCA,EAAM,QAAQ,4BAA6B,EAAE,EAAE,MAAM,GAAG,EAAE,CAAC,EAC3D,KCAO4B,EAAgBzC,GAAwB,CACnD,GAAI,CACF,KAAM,CAAE,OAAAgB,CAAO,EAAIf,EAAiB,4BAA6B,CAAE,IAAAD,CAAI,CAAC,EACxE,OAAOgB,CACT,MAAQ,CACN,GAAI,CACF,KAAM,CAAE,OAAAA,CAAO,EAAIf,EAAiB,aAAc,CAAE,IAAAD,CAAI,CAAC,EACnD0C,EAAS1B,EAAO,MAAM;AAAA,CAAI,EAAE,CAAC,GAAG,KAAA,EACtC,GAAI0B,EAAQ,CACV,KAAM,CAAE,OAAQC,CAAU,EAAI1C,EAC5B,sBAAsByC,CAAM,GAC5B,CACE,IAAA1C,CACF,CACF,EACA,OAAO2C,CACT,CACA,MAAO,EACT,MAAQ,CACN,MAAO,EACT,CACF,CACF,EAEaC,EAAoB5C,GAAyC,CACxE,MAAM2C,EAAYF,EAAazC,CAAG,EAElC,OAAI2C,EAAU,SAAS,YAAY,EAC1B,SAGLA,EAAU,SAAS,YAAY,EAC1B,SAGLA,EAAU,SAAS,WAAW,EACzB,QAGLA,EAAU,SAAS,eAAe,EAC7B,YAGF,IACT,EC7BME,EAAW,UACXC,EAAgB,QAEhBC,EAA8C,CAClD,OAAQ,CACN,MAAO,sBACP,IAAK,0BACL,OAAQ,oBACV,EACA,OAAQ,CACN,MAAO,wBACP,IAAK,wBACL,OAAQ,sBACV,EACA,MAAO,CACL,MAAO,sBACP,IAAK,0BACL,OAAQ,oBACV,EACA,UAAW,CACT,MAAO,sBACP,IAAK,kBACL,OAAQ,qBACV,CACF,EAEMC,EAAa,CACjB,CAAE,iBAAAC,EAAkB,gBAAAC,EAAiB,cAAAC,CAAc,EACnDC,IACY,CACZ,MAAMC,EAAWD,EAAWL,EAASK,CAAQ,EAAI,CAEjD,EAAA,MAAO,CACL,OAAQH,GAAoBI,EAAS,OACrC,MAAOH,GAAmBG,EAAS,MACnC,IAAKF,GAAiBE,EAAS,GACjC,CACF,EAEMC,EAAgBjC,GACfA,EAEQA,EACV,QAAQyB,EAAe,EAAE,EACzB,MAAM,GAAG,EACT,IAAKS,GAAQA,EAAI,MAAM,EAEd,CAAC,GAAG,QAAQ,OAAQ,EAAE,EAAE,KAAK,EAP9B,OAUAC,EAAmB,CAC9BC,EACAjC,EACAkC,EACAC,EACAC,IACmB,CACnB,MAAMC,EAAUb,EAAWU,EAASC,CAAW,EACzCG,EAAOJ,EAAQ,QACfK,EAAyB,CAAC,EAE1BC,EAAeN,EAAQ,SACzBlC,EAAQ,MAAM,EAAGkC,EAAQ,QAAQ,EACjClC,EAEJ,UAAWE,KAAUsC,EAAc,CACjC,KAAM,CAAE,KAAA9D,EAAM,QAAAG,EAAS,KAAAe,EAAM,OAAAD,EAAQ,MAAAN,EAAO,KAAAQ,EAAM,UAAA4C,CAAU,EAAIvC,EAC1D6B,EAAMD,EAAajC,CAAI,EACvB6C,EAAc/B,EAClBK,EAA4B3B,CAAK,GAAKM,EACtCyC,CACF,EACMO,EAAyB,CAC7B,KAAAjE,EACA,KAAAkB,EACA,MAAAP,EACA,OAAQqD,GAAa,MAAQA,GAAa,UAAY/C,EACtD,QAASsC,EAAI,SAAS,aAAapD,CAAO,CAC5C,EAEI4D,EAAU,SAAQE,EAAS,UAAYF,GAEvCJ,EAAQ,OAASC,IACnBK,EAAS,QAAUA,EAAS,QAAQ,QAClCtB,EACA,CAACuB,EAASC,IAID,YAHKR,EACT,MAAO,QAAQ,SAAUQ,CAAK,EAC9B,QAAQ,QAASP,CAAI,CACF,+CAA+CM,CAAO,MAEhF,GAGEP,EAAQ,QAAUC,IACpBK,EAAS,UAAYN,EAAQ,OAC1B,QAAQ,QAAS3D,CAAI,EACrB,QAAQ,QAAS4D,CAAI,GAEtBP,IAAKY,EAAS,IAAMZ,GAEpBM,EAAQ,KAAOC,GAAQP,IACzBY,EAAS,OAASN,EAAQ,IAAI,QAAQ,OAAQN,CAAG,EAAE,QAAQ,QAASO,CAAI,GAE1EC,EAAO,KAAKI,CAAQ,CACtB,CAEA,OAAOJ,CACT,EClHaO,EAAqB,CAChC9C,EACAkC,EACAC,IACqB,CACrB,MAAMC,EAAe,IAAI,IAEzB,UAAWlC,KAAUF,EAAS,CAC5B,MAAM+C,EAAU,CACd,CAAE,KAAM7C,EAAO,OAAQ,MAAOA,EAAO,KAAM,EAC3C,GAAGA,EAAO,SACZ,EAEA,SAAW,CAAE,KAAMP,EAAQ,MAAAN,CAAM,IAAK0D,EAAS,CAC7C,MAAMC,EAASrC,EACbK,EAA4B3B,CAAK,GAAKM,EACtCuC,EAAQ,IACV,EACMpB,EAAWkC,GAAQ,UAAYrD,EAC/BP,EAAO4D,GAAQ,MAAQlC,EAEvB4B,EAAcN,EAAa,IAAIhD,EAAOC,CAAK,EAEjD,GAAIqD,EACFA,EAAY,cACP,CACL,MAAMO,EAAuB,CAC3B,KAAA7D,EACA,MAAAC,EACA,QAAS,CACX,EAEI6C,EAAQ,SACVe,EAAK,OACHD,GAAQ,SACPb,IAAgB,SACb,yCAAyCrB,CAAQ,OACjD,+BAA+BlC,EAAaS,GAASyB,CAAQ,CAAC,aAEtE,MAAMoC,EACHF,GAAQ,KAAOb,IAAgB,SAC5B,sBAAsBrB,CAAQ,GAC9B,OACFoC,IAAKD,EAAK,IAAMC,GAEpBd,EAAa,IAAIhD,EAAOC,EAAO4D,CAAI,CACrC,CACF,CACF,CAEA,OAAO,MAAM,KAAKb,EAAa,OAAQ,CAAA,EAAE,OAAO,CAACa,EAAME,EAAOC,IAAS,CAIrE,GAAIH,EAAK,MAAM,MAAM,GAAG,EAAE,CAAC,GAAG,MAAM,WAAW,EAAG,CAChD,MAAMI,EAAYD,EAAK,UAAWE,GAAMA,EAAE,OAASL,EAAK,IAAI,EAC5D,OAAII,IAAcF,GAEhBC,EAAKC,CAAS,EAAE,SAAWJ,EAAK,QACzB,IAEF,EACT,CACA,MAAO,EACT,CAAC,CACH,EAEaM,EAAsB,CACjCvD,EACAmC,EACAD,EACAsB,EAA8B,CAAC,IACV,CACrB,MAAMpB,EAAeU,EAAmB9C,EAASkC,EAASC,CAAW,EAErE,GAAID,EAAQ,MAAM,QAAUsB,EAAkB,QAC5C,UAAWC,KAAoBD,EAC7B,GAAIpB,EAAa,MAAOa,GAASA,EAAK,OAASQ,CAAgB,EAAG,CAChE,MAAMC,EAAkB/C,EACtB8C,EACAvB,EAAQ,IACV,EAEA,GAAI,CAACwB,EAAiB,SAEtB,MAAMnB,EAAyB,CAC7B,KAAMmB,EAAgB,MAAQD,EAC9B,MAAO,GACP,QAAS,CACX,EAEMP,EACJQ,EAAgB,MACfvB,IAAgB,SACb,sBAAsBuB,EAAgB,QAAQ,GAC9C,MAEFxB,EAAQ,SACVK,EAAO,OACLmB,EAAgB,SACfvB,IAAgB,SACb,yCAAyCuB,EAAgB,QAAQ,OACjE,+BAA+B9E,EAAa8E,EAAgB,QAAQ,CAAC,aAEzER,IAAKX,EAAO,IAAMW,GAEtBd,EAAa,KAAKG,CAAM,CAC1B,EAIJ,OAAOL,EAAQ,YAAYE,CAAY,GAAKA,CAC9C,EChHauB,EACX,CAAC,CACC,YAAAC,EACA,YAAAC,EACA,aAAAzB,EACA,UAAA0B,EAAY,GACZ,OAAAC,EAEA,sBAAAC,CACF,EAAsB,CAAA,IACrB/B,GAAQ,CACP,MAAMzD,EAAMyD,EAAI,IAAI,OACdgC,EAAAA,EAAiB1F,EAAaC,CAAG,EACjC2D,EAAc8B,EAAiB7C,EAAiB5C,CAAG,EAAI,KAE7D,MAAO,CACL,KAAM,uBAEN,YAAa,MACX0F,GACG,CAOH,GANAA,EAAK,KAAK,IAAM,CAEZ,EAAA,CAACD,GAAkBC,EAAK,mBAAqB,MAI7CH,GAAU,CAACA,EAAOG,CAAI,EAAG,OAE7B,KAAM,CAAE,YAAAC,CAAY,EAAID,EAGxB,GACE,EAAEC,EAAY,cAAgB/B,GAAgB,KAC9C,EAAE+B,EAAY,WAAaL,IAC3BF,IAAgB,IAChBC,IAAgB,GAEhB,OAGF,MAAMO,EAAY,CAChBF,EAAK,iBACL,IAAIA,EAAK,YAAY,YAAc,IAAI,IAAKjB,GAC1CoB,EAAK,KAAKH,EAAK,iBAAkB,KAAMjB,CAAI,CAC7C,CACF,EAEMjD,EAAU,MAAMI,EAAWgE,EAAW5F,CAAG,EAE/C,GAAIwB,EAAQ,SAAW,EAAG,OAEtB4D,IAAgB,KAClBM,EAAK,KAAK,IAAI,YAAclE,EAAQA,EAAQ,OAAS,CAAC,EAAE,MAGtD6D,IAAgB,KAClBK,EAAK,KAAK,IAAI,YAAclE,EAAQ,CAAC,EAAE,MAGzC,MAAMsE,EAAsBC,EAAcnC,CAAY,EAClDA,EACA,GAcJ,IAZK+B,EAAY,cAAgB/B,KAAkB,KACjDkC,EAAoB,YAAcN,EAClCE,EAAK,KAAK,IAAI,aAAeX,EAC3BvD,EACAmC,EACAmC,EACA,MAAM,QAAQH,EAAY,YAAY,EAClCA,EAAY,aACZ,CACN,CAAA,GAGEA,EAAY,WAAaL,EAAW,CACtC,MAAMU,EAAmBD,EAAcT,CAAS,EAAIA,EAAY,CAAC,EAEjEI,EAAK,KAAK,IAAI,UAAYlC,EACxBC,EACAjC,EACAwE,EACArC,EACAmC,EAAoB,MAAQ,CAC9B,CAAA,CACF,CACF,EAGA,cAAe,IAAM,CACnBrC,EAAI,MAAM,QAASiC,GAAS,CAC1B,OAAOA,EAAK,YAAY,UAC1B,CAAC,CACH,CACF,CACF"}